{"version":3,"file":"static/js/415.20d4a9b4.chunk.js","mappings":"oLAIA,EAFc,SAAAA,GAAI,OAAI,uBAAIA,GAAR,C,kGCDlB,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA2E,mBAA3E,EAAsG,oBAAtG,EAAkI,oB,SCK5HC,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,GAAWC,EAAAA,EAAAA,MAEXC,EAASH,EAAMI,KAAI,YAA+C,IAA5CC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,MACnCC,EAD6D,EAAnBC,aACtBC,MAAM,EAAG,GACnC,OACE,SAAC,KAAD,CAEEC,GAAE,kBAAaN,GACfO,MAAO,CAAEC,KAAMZ,GACfa,UAAWC,EAJb,UAME,gBAAID,UAAWC,EAAf,WACE,gBACEC,QAAQ,OACRC,IACEX,EAAW,yCAC2BA,GAClCY,EAENC,IAAKZ,EACLO,UAAWC,KAEb,gBAAID,UAAWC,EAAf,UACGR,EADH,IACWC,IAAQ,gCAAQA,EAAR,cAjBhBH,EAqBN,IAEP,OACI,eAAIS,UAAWC,EAAf,SACKZ,GAGZ,EAED,GAAeiB,EAAAA,EAAAA,MAAKrB,E,wJCpCdsB,EAAgBC,EAAAA,GAAAA,GAAH,sDAoCnB,UA/Ba,WACT,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOvB,EAAP,KAAcwB,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOP,EAAP,KAAgBS,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,sGAEZJ,GAAW,GAFC,UAGYK,EAAAA,EAAAA,MAHZ,gBAGLC,EAHK,EAGLA,QACPP,EAASO,GAJG,gDAOZJ,EAAS,KAAMK,SAPH,yBAUZP,GAAW,GAVC,4EAAH,qDAajBI,GACH,GAAE,KAGC,6BACI,SAACR,EAAD,6BACCK,IAAS,SAAC,IAAD,CAAO5B,KAAM4B,IACtBV,GAAU,SAAC,IAAD,KAAa,SAAC,IAAD,CAAYhB,MAAOA,MAGtD,C,yLCrCKiC,E,QAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QALQ,sCASHP,EAAW,mCAAG,sGACAG,EAASK,IAAI,uBADb,uBACfC,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDAKXC,EAAY,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,yCACDT,EAASK,IAAI,gBAAiB,CACjDF,OAAQ,CACJK,MAAAA,EACAC,cAAAA,KAJgB,uBAChBH,EADgB,EAChBA,KADgB,kBAOjBA,GAPiB,2CAAH,sDAWZI,EAAU,mCAAG,WAAMtC,GAAN,yFACC4B,EAASK,IAAT,iBAAuBjC,IADxB,uBACdkC,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVK,EAAU,mCAAG,WAAMvC,GAAN,yFACC4B,EAASK,IAAT,iBAAuBjC,EAAvB,aADD,uBACdkC,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVM,EAAU,mCAAG,WAAMxC,GAAN,yFACC4B,EAASK,IAAT,gBAAsBjC,EAAtB,aADD,uBACdkC,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qD","sources":["components/Error/Error.jsx","webpack://react-homework-template/./src/components/MoviesList/list.module.scss?549d","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst Error = text => <p>{text}</p>;\n\nexport default Error;\n\nError.propTypes = {\n    text: PropTypes.string,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"list_list__WYhRJ\",\"link\":\"list_link__fSJdM\",\"item\":\"list_item__hr83S\",\"image\":\"list_image__7Et1y\",\"title\":\"list_title__6JiHP\"};","import { memo } from \"react\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport defaultPoster from '../../images/defaultPoster.jpg'\nimport css from './list.module.scss';\n\nconst MoviesList = ({ items }) => {\n    const location = useLocation();\n\n    const movies = items.map(({ id, poster_path, title, release_date }) => {\n        const year = release_date.slice(0, 4);\n        return (\n          <Link\n            key={id}\n            to={`/movies/${id}`}\n            state={{ from: location }}\n            className={css.link}\n          >\n            <li className={css.item}>\n              <img\n                loading=\"lazy\"\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                    : defaultPoster\n                }\n                alt={title}\n                className={css.image}\n              />\n              <h2 className={css.title}>\n                {title} {year && <span>({year})</span>}\n              </h2>\n            </li>\n          </Link>\n        );});\n    \n    return (\n        <ul className={css.list}>\n            {movies}\n        </ul>\n    );\n}\n\nexport default memo(MoviesList);\n\nMoviesList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string,\n  poster_path: PropTypes.string,\n  title: PropTypes.string,\n  release_date: PropTypes.string,\n};","import { useState, useEffect } from \"react\";\nimport MoviesList from 'components/MoviesList';\nimport { getTrending } from \"services/api\";\nimport Error from \"components/Error\";\nimport Loader from \"components/Loader\";\nimport styled from 'styled-components';\n\nconst StyledHeading = styled.h1`\n    text-align: center;\n  }\n`;\n\nconst Home = () => {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                setLoading(true);\n                const {results} = await getTrending();\n                setItems(results);\n            }\n            catch (error) {\n                setError(error.message);\n            }\n            finally {\n                setLoading(false);\n            }\n        }\n        fetchMovies();\n    }, []);\n\n    return (\n        <main>\n            <StyledHeading>Trending today</StyledHeading>\n            {error && <Error text={error} />}\n            {loading ? <Loader /> : <MoviesList items={items} />}\n        </main>\n    );\n};\n\nexport default Home;","import axios from \"axios\";\n\nconst API_KEY = 'ccd8d539caa8bbfd0843a00859c1dd02';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: API_KEY,\n    }\n});\n\nexport const getTrending = async () => {\n    const { data } = await instance.get(\"/trending/movie/day\");  \n    return data;\n}\n\nexport const searchMovies = async (query, include_adult = false) => {\n    const { data } = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n            include_adult,\n        }\n    }); \n    return data;\n}\n\n\nexport const getDetails = async id => {\n    const { data } = await instance.get(`/movie/${id}`);  \n    return data;\n}\n\nexport const getCredits = async id => {\n    const { data } = await instance.get(`/movie/${id}/credits`);  \n    return data;\n}\n\nexport const getReviews = async id => {\n    const { data } = await instance.get(`movie/${id}/reviews`);  \n    return data;\n}"],"names":["text","MoviesList","items","location","useLocation","movies","map","id","poster_path","title","year","release_date","slice","to","state","from","className","css","loading","src","defaultPoster","alt","memo","StyledHeading","styled","useState","setItems","setLoading","error","setError","useEffect","fetchMovies","getTrending","results","message","instance","axios","baseURL","params","api_key","get","data","searchMovies","query","include_adult","getDetails","getCredits","getReviews"],"sourceRoot":""}