{"version":3,"file":"static/js/415.b83eb42f.chunk.js","mappings":"mLAIA,EAFc,SAAAA,GAAI,OAAI,uBAAIA,GAAR,C,sGCGZC,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,GAAWC,EAAAA,EAAAA,MAEXC,EAASH,EAAMI,KAAI,YAA+C,IAA5CC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,MACnCC,EAD6D,EAAnBC,aACtBC,MAAM,EAAG,GACnC,OACE,SAAC,KAAD,CAAeC,GAAE,kBAAaN,GAAMO,MAAO,CAAEC,KAAMZ,GAAnD,UACE,2BACE,gBACEa,QAAQ,OACRC,IACET,EAAW,yCAC2BA,GAClCU,EAENC,IAAKV,KAEP,0BACLA,EADK,KACIC,EADJ,WAXOH,EAgBV,IAEP,OACI,wBACKF,GAGZ,EAED,GAAee,EAAAA,EAAAA,MAAKnB,E,0HCApB,UA9Ba,WACT,OAA0BoB,EAAAA,EAAAA,UAAS,IAAnC,eAAOnB,EAAP,KAAcoB,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOL,EAAP,KAAgBO,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,sGAEZJ,GAAW,GAFC,UAGYK,EAAAA,EAAAA,MAHZ,gBAGLC,EAHK,EAGLA,QACPP,EAASO,GAJG,gDAOZJ,EAAS,KAAMK,SAPH,yBAUZP,GAAW,GAVC,4EAAH,qDAajBI,GACH,GAAE,KAGD,4BACGH,IAAS,SAAC,IAAD,CAAOxB,KAAMwB,IACtBR,GAAU,SAAC,IAAD,KAAa,SAAC,IAAD,CAAYd,MAAOA,MAGlD,C,sLC9BK6B,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QALQ,sCASHP,EAAW,mCAAG,sGACAG,EAASK,IAAI,uBADb,uBACfC,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDAKXC,EAAY,mCAAG,WAAOC,GAAP,gGAAaC,EAAb,+BAAoB,EAAGC,EAAvB,yCACDV,EAASK,IAAI,gBAAiB,CACjDF,OAAQ,CACJK,MAAAA,EACAC,KAAAA,EACAC,cAAAA,KALgB,uBAChBJ,EADgB,EAChBA,KADgB,kBAQjBA,GARiB,2CAAH,sDAYZK,EAAU,mCAAG,WAAOnC,GAAP,yFACCwB,EAASK,IAAT,iBAAuB7B,IADxB,uBACd8B,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVM,EAAU,mCAAG,WAAOpC,GAAP,yFACCwB,EAASK,IAAT,iBAAuB7B,EAAvB,aADD,uBACd8B,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVO,EAAU,mCAAG,WAAOrC,GAAP,8FAAWiC,EAAX,+BAAkB,EAAlB,SACCT,EAASK,IAAT,iBAAuB7B,EAAvB,YAAqC,CACxD2B,OAAQ,CACJM,KAAAA,KAHc,uBACdH,EADc,EACdA,KADc,kBAMfA,GANe,2CAAH,qD","sources":["components/Error/Error.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst Error = text => <p>{text}</p>;\n\nexport default Error;\n\nError.propTypes = {\n    text: PropTypes.string,\n}\n","import { memo } from \"react\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport defaultPoster from '../../images/defaultPoster.jpg'\n\nconst MoviesList = ({ items }) => {\n    const location = useLocation();\n\n    const movies = items.map(({ id, poster_path, title, release_date }) => {\n        const year = release_date.slice(0, 4);\n        return (\n          <Link key={id} to={`/movies/${id}`} state={{ from: location }}>\n            <li>\n              <img\n                loading=\"lazy\"\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                    : defaultPoster\n                }\n                alt={title}\n              />\n              <h2>\n        {title} ({year})\n              </h2>\n            </li>\n          </Link>\n        );});\n    \n    return (\n        <ul>\n            {movies}\n        </ul>\n    );\n}\n\nexport default memo(MoviesList);\n\nMoviesList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string,\n  poster_path: PropTypes.string,\n  title: PropTypes.string,\n  release_date: PropTypes.string,\n};","import { useState, useEffect } from \"react\";\nimport MoviesList from 'components/MoviesList';\nimport { getTrending } from \"services/api\";\nimport Error from \"components/Error\";\nimport Loader from \"components/Loader\";\n\nconst Home = () => {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                setLoading(true);\n                const {results} = await getTrending();\n                setItems(results);\n            }\n            catch (error) {\n                setError(error.message);\n            }\n            finally {\n                setLoading(false);\n            }\n        }\n        fetchMovies();\n    }, []);\n\n    return (\n      <main>\n        {error && <Error text={error} />}\n        {loading ? <Loader /> : <MoviesList items={items} />}\n      </main>\n    );\n};\n\nexport default Home;","import axios from \"axios\";\n\nconst API_KEY = 'ccd8d539caa8bbfd0843a00859c1dd02';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: API_KEY,\n    }\n});\n\nexport const getTrending = async () => {\n    const { data } = await instance.get(\"/trending/movie/day\");  \n    return data;\n}\n\nexport const searchMovies = async (query,page = 1, include_adult = false) => {\n    const { data } = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n            page,\n            include_adult,\n        }\n    }); \n    return data;\n}\n\n\nexport const getDetails = async (id) => {\n    const { data } = await instance.get(`/movie/${id}`);  \n    return data;\n}\n\nexport const getCredits = async (id) => {\n    const { data } = await instance.get(`/movie/${id}/credits`);  \n    return data;\n}\n\nexport const getReviews = async (id, page = 1) => {\n    const { data } = await instance.get(`/movie/${id}/reviews`, {\n        params: {\n            page,\n        }\n    });  \n    return data;\n}"],"names":["text","MoviesList","items","location","useLocation","movies","map","id","poster_path","title","year","release_date","slice","to","state","from","loading","src","defaultPoster","alt","memo","useState","setItems","setLoading","error","setError","useEffect","fetchMovies","getTrending","results","message","instance","axios","baseURL","params","api_key","get","data","searchMovies","query","page","include_adult","getDetails","getCredits","getReviews"],"sourceRoot":""}