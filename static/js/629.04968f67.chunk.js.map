{"version":3,"file":"static/js/629.04968f67.chunk.js","mappings":"yRAIMA,EAAW,SAAC,GAAc,IACtBC,EADqB,EAAXC,KACGC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC9C,OACE,2BACE,gBACEC,QAAQ,OACRC,IACEJ,EAAY,yCAC0BA,GAClCK,EAENC,IAAKL,KAEP,wBACGA,KAEC,uCACgBC,OAdbH,EAkBhB,IAED,OAAO,wBAAKH,GACb,EAED,GAAeW,EAAAA,EAAAA,MAAKZ,GCWpB,EAlCa,WACT,OAA4Ba,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOL,EAAP,KAAgBQ,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQd,GAAOe,EAAAA,EAAAA,MAAPf,GAoBR,OAjBAgB,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,sGAEVL,GAAW,GAFD,UAGaM,EAAAA,EAAAA,IAAWlB,GAHxB,gBAGFF,EAHE,EAGFA,KACRa,EAAUb,GAJA,gDAOVgB,EAAS,KAAMK,SAPL,yBAUVP,GAAW,GAVD,4EAAH,qDAafK,GACH,GAAE,CAACjB,KAGA,+BACKI,IAAW,SAACgB,EAAA,EAAD,IACXP,IAAS,SAACQ,EAAA,EAAD,CAAOC,KAAMT,KACvB,SAAC,EAAD,CAAUf,KAAMY,MAG3B,C,mECnCD,EAFc,SAAAY,GAAI,OAAI,uBAAIA,GAAR,C,sLCEZC,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QALQ,sCASHC,EAAW,mCAAG,sGACAL,EAASM,IAAI,uBADb,uBACfC,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDAKXC,EAAY,mCAAG,WAAOC,GAAP,gGAAaC,EAAb,+BAAoB,EAAGC,EAAvB,yCACDX,EAASM,IAAI,gBAAiB,CACjDH,OAAQ,CACJM,MAAAA,EACAC,KAAAA,EACAC,cAAAA,KALgB,uBAChBJ,EADgB,EAChBA,KADgB,kBAQjBA,GARiB,2CAAH,sDAYZK,EAAU,mCAAG,WAAOnC,GAAP,yFACCuB,EAASM,IAAT,iBAAuB7B,IADxB,uBACd8B,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVZ,EAAU,mCAAG,WAAOlB,GAAP,yFACCuB,EAASM,IAAT,iBAAuB7B,EAAvB,aADD,uBACd8B,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVM,EAAU,mCAAG,WAAOpC,GAAP,8FAAWiC,EAAX,+BAAkB,EAAlB,SACCV,EAASM,IAAT,iBAAuB7B,EAAvB,YAAqC,CACxD0B,OAAQ,CACJO,KAAAA,KAHc,uBACdH,EADc,EACdA,KADc,kBAMfA,GANe,2CAAH,qD","sources":["components/Cast/CastCard/CastCard.jsx","components/Cast/Cast.jsx","components/Error/Error.jsx","services/api.js"],"sourcesContent":["import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultAvatar from '../../../images/defaultAvatar.jpeg';\n\nconst CastCard = ({ cast }) => {\n    const cards = cast.map(({ id, profile_path, name, character }) => { \n        return (\n          <li key={id}>\n            <img\n              loading=\"lazy\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : defaultAvatar\n              }\n              alt={name}\n            />\n            <h2>\n              {name}\n                </h2>\n                <p>\n                    Character: {character}\n                </p>\n          </li>\n        );\n  });\n\n  return <ul>{cards}</ul>;\n};\n\nexport default memo(CastCard);\n\nCastCard.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string,\n  profile_path: PropTypes.string,\n  name: PropTypes.string,\n  character: PropTypes.string,\n};\n","import { getCredits } from \"services/api\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Loader from \"components/Loader\";\nimport Error from \"components/Error\";\nimport CastCard from \"./CastCard\";\n\nconst Cast = () => {\n    const [artist, setArtist] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    \n    const { id } = useParams();\n    \n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                setLoading(true);\n                const { cast } = await getCredits(id);\n                setArtist(cast);\n            }\n            catch (error) {\n                setError(error.message);\n            }\n            finally {\n                setLoading(false);\n            }\n        }\n        fetchCast();\n    }, [id]);\n\n    return (\n        <section>\n            {loading && <Loader />}\n            {error && <Error text={error} />}\n            <CastCard cast={artist} />\n        </section>\n    );\n};\n\nexport default Cast;","import PropTypes from 'prop-types';\n\nconst Error = text => <p>{text}</p>;\n\nexport default Error;\n\nError.propTypes = {\n    text: PropTypes.string,\n}\n","import axios from \"axios\";\n\nconst API_KEY = 'ccd8d539caa8bbfd0843a00859c1dd02';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: API_KEY,\n    }\n});\n\nexport const getTrending = async () => {\n    const { data } = await instance.get(\"/trending/movie/day\");  \n    return data;\n}\n\nexport const searchMovies = async (query,page = 1, include_adult = false) => {\n    const { data } = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n            page,\n            include_adult,\n        }\n    }); \n    return data;\n}\n\n\nexport const getDetails = async (id) => {\n    const { data } = await instance.get(`/movie/${id}`);  \n    return data;\n}\n\nexport const getCredits = async (id) => {\n    const { data } = await instance.get(`/movie/${id}/credits`);  \n    return data;\n}\n\nexport const getReviews = async (id, page = 1) => {\n    const { data } = await instance.get(`/movie/${id}/reviews`, {\n        params: {\n            page,\n        }\n    });  \n    return data;\n}"],"names":["CastCard","cards","cast","map","id","profile_path","name","character","loading","src","defaultAvatar","alt","memo","useState","artist","setArtist","setLoading","error","setError","useParams","useEffect","fetchCast","getCredits","message","Loader","Error","text","instance","axios","baseURL","params","api_key","getTrending","get","data","searchMovies","query","page","include_adult","getDetails","getReviews"],"sourceRoot":""}