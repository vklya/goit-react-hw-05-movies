{"version":3,"file":"static/js/904.b73669bc.chunk.js","mappings":"sKACA,MAAyB,uB,SCSzB,EAPe,SAAC,GAAD,IAAGA,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,OAAuB,mBAAQC,UAAWC,EAAYH,QAASA,EAAxC,SAAkDC,GAAzE,C,mECCf,EAFc,SAAAA,GAAI,OAAI,uBAAIA,GAAR,C,wJCCZG,EAAS,SAAC,GAAiB,IACvBC,EADsB,EAAdC,QACQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACvC,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EAKZ,IAEH,OAAO,wBAAKH,GACb,EAED,GAAeM,EAAAA,EAAAA,MAAKP,G,0BC+BpB,EAtCgB,WACZ,OAA8BQ,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAAwBL,EAAAA,EAAAA,UAAS,GAAjC,eAAOM,EAAP,KAAaC,EAAb,KAEQX,GAAOY,EAAAA,EAAAA,MAAPZ,IAERa,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY,mCAAG,yFACZd,EADY,iEAGbO,GAAW,GAHE,UAIaQ,EAAAA,EAAAA,IAAWf,EAAIU,GAJ5B,gBAILM,EAJK,EAILA,QACRX,GAAW,SAAAY,GAAS,wBAAQA,IAAR,OAAsBD,GAAtB,IALP,kDAObP,EAAS,KAAMS,SAPF,yBASbX,GAAW,GATE,6EAAH,qDAYlBO,GACH,GAAE,CAACd,EAAIU,IAMR,OACE,+BACGJ,IAAW,SAACa,EAAA,EAAD,IACXX,IAAS,SAACY,EAAA,EAAD,CAAO3B,KAAMe,IACtBV,GAAU,SAAC,EAAD,CAAQuB,MAAOvB,KAAc,SAACsB,EAAA,EAAD,CAAO3B,KAAM,4CACrD,SAAC6B,EAAA,EAAD,CAAQ9B,QATO,WACfmB,GAAQ,SAAAY,GAAQ,OAAIA,EAAW,CAAf,GACnB,EAOgC9B,KAAM,gBAG1C,C,sLCzCK+B,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QALQ,sCASHC,EAAW,mCAAG,sGACAL,EAASM,IAAI,uBADb,uBACfC,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDAKXC,EAAY,mCAAG,WAAOC,GAAP,gGAAavB,EAAb,+BAAoB,EAAGwB,EAAvB,yCACDV,EAASM,IAAI,gBAAiB,CACjDH,OAAQ,CACJM,MAAAA,EACAvB,KAAAA,EACAwB,cAAAA,KALgB,uBAChBH,EADgB,EAChBA,KADgB,kBAQjBA,GARiB,2CAAH,sDAYZI,EAAU,mCAAG,WAAOnC,GAAP,yFACCwB,EAASM,IAAT,iBAAuB9B,IADxB,uBACd+B,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVK,EAAU,mCAAG,WAAOpC,GAAP,yFACCwB,EAASM,IAAT,iBAAuB9B,EAAvB,aADD,uBACd+B,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKVhB,EAAU,mCAAG,WAAOf,GAAP,8FAAWU,EAAX,+BAAkB,EAAlB,SACCc,EAASM,IAAT,iBAAuB9B,EAAvB,YAAqC,CACxD2B,OAAQ,CACJjB,KAAAA,KAHc,uBACdqB,EADc,EACdA,KADc,kBAMfA,GANe,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/Button/button.module.scss?3bf9","components/Button/Button.jsx","components/Error/Error.jsx","components/Reviews/Review/Review.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__zpxkc\"};","import css from './button.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick, text }) => <button className={css.button} onClick={onClick}>{text}</button>;\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    text: PropTypes.string,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\n\nconst Error = text => <p>{text}</p>;\n\nexport default Error;\n\nError.propTypes = {\n    text: PropTypes.string,\n}\n","import { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Review = ({ reviews }) => {\n    const cards = reviews.map(({ id, author, content }) => {\n      return (\n        <li key={id}>\n          <h4>Author: {author}</h4>\n          <p>{content}</p>\n        </li>\n      );\n    });\n\n  return <ul>{cards}</ul>;\n};\n\nexport default memo(Review);\n\nReview.propTypes = {\n  reviews: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string,\n  author: PropTypes.string,\n  content: PropTypes.string,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from \"services/api\";\nimport Review from './Review';\nimport Error from 'components/Error';\nimport Loader from 'components/Loader';\nimport Button from 'components/Button';\n\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [page, setPage] = useState(1);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        const fetchReviews = async () => {\n            if (!id) return;\n            try {\n                setLoading(true);\n                const { results } = await getReviews(id, page);\n                setReviews(prevItems => [...prevItems, ...results]);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetchReviews();\n    }, [id, page]);\n\n    const onLoadMore = () => {\n        setPage(prevPage => prevPage + 1);\n    };\n\n    return (\n      <section>\n        {loading && <Loader />}\n        {error && <Error text={error} />}\n        {reviews ? <Review items={reviews} /> : <Error text={'There is no reviewsfor this movie yet.'} />}\n        <Button onClick={onLoadMore} text={'Load more'} />\n      </section>\n    );\n};\n\nexport default Reviews;","import axios from \"axios\";\n\nconst API_KEY = 'ccd8d539caa8bbfd0843a00859c1dd02';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: API_KEY,\n    }\n});\n\nexport const getTrending = async () => {\n    const { data } = await instance.get(\"/trending/movie/day\");  \n    return data;\n}\n\nexport const searchMovies = async (query,page = 1, include_adult = false) => {\n    const { data } = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n            page,\n            include_adult,\n        }\n    }); \n    return data;\n}\n\n\nexport const getDetails = async (id) => {\n    const { data } = await instance.get(`/movie/${id}`);  \n    return data;\n}\n\nexport const getCredits = async (id) => {\n    const { data } = await instance.get(`/movie/${id}/credits`);  \n    return data;\n}\n\nexport const getReviews = async (id, page = 1) => {\n    const { data } = await instance.get(`/movie/${id}/reviews`, {\n        params: {\n            page,\n        }\n    });  \n    return data;\n}"],"names":["onClick","text","className","css","Review","cards","reviews","map","id","author","content","memo","useState","setReviews","loading","setLoading","error","setError","page","setPage","useParams","useEffect","fetchReviews","getReviews","results","prevItems","message","Loader","Error","items","Button","prevPage","instance","axios","baseURL","params","api_key","getTrending","get","data","searchMovies","query","include_adult","getDetails","getCredits"],"sourceRoot":""}